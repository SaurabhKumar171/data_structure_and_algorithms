#include <iostream>
#include <vector>
using namespace std;

//Approach :  O(n) time complexity , O(1) space complexity
class Solution {
public:
    bool isHeap(vector<int>& nums) {
        int n = nums.size();

        if(n <= 1) return true;

        for(int i = 1; i < n; i++){
            int parent = (i - 1)/2;

            if(nums[parent] > nums[i]) return false;
        }

        return true;
    }
};

//Approach 2 :  O(n) time complexity , O(1) space complexity
class Solution {
public:
    bool isHeap(vector<int>& nums) {
        int n = nums.size();

        if(n <= 1) return true;

        // traversing through all internal nodes (non -leaf nodes)
        for(int i = n/2 - 1; i >= 0; i--){
            int left = 2*i + 1;
            int right = 2*i + 2;

            if((left < n && nums[left] < nums[i]) || (right < n && nums[right] < nums[i])) return false;
        }

        return true;
    }
};