#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
using namespace std;


// Optimal Approach : O(n) time complexity, O(n) space complexity

class Solution {
public:
    string removeKdigits(string nums, int k) {
        stack<char> st;
        int n = nums.size();

        for(int i = 0; i < n; i++){
            while(!st.empty() && 
                    k > 0 && 
                    (st.top() - '0') > (nums[i] - '0')){
                k--;
                st.pop();
            }

            st.push(nums[i]);
        }

        if(st.empty()) return "0";

        while(k > 0){ 
            st.pop(); 
            k--;
        }

        string res = "";
        while(!st.empty()){
            res += st.top();
            st.pop();
        }

        while(res.size() != 0 && res.back() == '0'){
            res.pop_back();
        }
        
        reverse(res.begin(), res.end());
        if(res.empty()) return "0";

        return res;
    }
};